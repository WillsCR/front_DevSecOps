# ===============================================
# GitHub Actions - Escaneo de Seguridad con Trivy
# ===============================================

name: "🔎 Escaneo Avanzado de Seguridad con Trivy"

on:
  # Permite ejecutar el workflow manualmente desde GitHub
  workflow_dispatch:
  # Ejecuta el workflow en cada push a la rama main
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  # Ejecuta el workflow automáticamente cada lunes a las 3 AM
  schedule:
    - cron: '0 3 * * 1'  

env:
  IMAGE_NAME: "advanced-app-scan:${{ github.sha }}"

jobs:
  trivy-advanced-scan:
    name:  Escaneo avanzado de contenedor y configuración con Trivy
    runs-on: ubuntu-latest
    steps:
      # Descarga el código fuente del repositorio
      - name:  Checkout del código
        uses: actions/checkout@v4

      # Limpia imágenes Docker antiguas para ahorrar espacio
      - name:  Limpia imágenes Docker antiguas
        run: |
          docker image prune -af || true

      # Construye la imagen Docker de la aplicación
      - name:  Construye la imagen Docker
        run: |
          docker build -t $IMAGE_NAME .

      # Escanea la imagen Docker en busca de vulnerabilidades (reporte JSON)
      - name:  Escaneo de vulnerabilidades con Trivy (JSON)
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: docker://${{ env.IMAGE_NAME }}
          format: 'json'
          output: 'trivy-vuln.json'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM'

      # Escanea la configuración y dependencias (reporte SARIF para Security Tab)
      - name:  Escaneo de configuración con Trivy (SARIF)
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-config.sarif'

      # Muestra un resumen visual de vulnerabilidades en el workflow
      - name:  Mostrar resumen de vulnerabilidades
        run: |
          if [ -f trivy-vuln.json ]; then
            echo "## Resumen de vulnerabilidades encontradas por Trivy" >> $GITHUB_STEP_SUMMARY
            jq '.Results[] | select(.Vulnerabilities) | {Target, Vulns: [.Vulnerabilities[] | select(.Severity=="CRITICAL" or .Severity=="HIGH" or .Severity=="MEDIUM") | {ID, Severity, Title}]}' trivy-vuln.json >> $GITHUB_STEP_SUMMARY
          fi

      # Sube los reportes generados como artefactos descargables
      - name: Subir reportes de Trivy
        uses: actions/upload-artifact@v4
        with:
          name: trivy-reports
          path: |
            trivy-vuln.json
            trivy-config.sarif
          retention-days: 30

      # Verifica si el archivo SARIF existe y guarda el resultado en un output
      - name: Verificar existencia de trivy-config.sarif
        id: check_sarif
        run: |
          if [ -f trivy-config.sarif ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "El archivo trivy-config.sarif existe y será subido."
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Advertencia: El archivo trivy-config.sarif NO fue generado por Trivy." >> $GITHUB_STEP_SUMMARY
          fi

      # Sube el reporte SARIF a la pestaña de seguridad de GitHub solo si existe
      - name: Subir resultados SARIF a Security Tab
        if: steps.check_sarif.outputs.exists == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-config.sarif'
