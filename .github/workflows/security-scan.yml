# ===============================================
# GitHub Actions - Security Scanning
# Solo escaneo de dependencias (npm audit)
# ===============================================

name:  Dependency Security Scan Only

on:
  schedule:
    - cron: '0 2 * * 1'  # Ejecutar cada lunes a las 2 AM
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - 'package*.json'
      - 'Dockerfile'
      - '.github/workflows/security-scan.yml'

env:
  NODE_VERSION: '18'

jobs:
  dependency-scan:
    name:  Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout del código fuente
      - name:  Checkout Code
        uses: actions/checkout@v4

      # 2. Configura Node.js
      - name:  Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # 3. Instala dependencias
      - name:  Install Dependencies
        run: npm ci --prefer-offline --no-audit

      # 4. Escaneo de dependencias
      - name:  NPM Audit (Detailed)
        id: npm_audit
        run: |
          echo "##  NPM Security Audit Report" >> $GITHUB_STEP_SUMMARY
          npm audit --json > audit-report.json || true
          if [ -s audit-report.json ]; then
            CRITICAL=$(jq -r '.vulnerabilities | map(select(.severity == "critical")) | length' audit-report.json)
            HIGH=$(jq -r '.vulnerabilities | map(select(.severity == "high")) | length' audit-report.json)
            MODERATE=$(jq -r '.vulnerabilities | map(select(.severity == "moderate")) | length' audit-report.json)
            LOW=$(jq -r '.vulnerabilities | map(select(.severity == "low")) | length' audit-report.json)
            echo "### Vulnerabilities by Severity:" >> $GITHUB_STEP_SUMMARY
            echo "- 🔴 Critical: $CRITICAL" >> $GITHUB_STEP_SUMMARY
            echo "- 🟠 High: $HIGH" >> $GITHUB_STEP_SUMMARY
            echo "- 🟡 Moderate: $MODERATE" >> $GITHUB_STEP_SUMMARY
            echo "- 🟢 Low: $LOW" >> $GITHUB_STEP_SUMMARY
            if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
              echo "❌ Critical or High severity vulnerabilities found!" >> $GITHUB_STEP_SUMMARY
              echo "### 🚨 Action Required:" >> $GITHUB_STEP_SUMMARY
              echo "Run \`npm audit fix\` to resolve security issues." >> $GITHUB_STEP_SUMMARY
              echo "scan_status=failed" >> $GITHUB_OUTPUT
              exit 1
            else
              echo "scan_status=passed" >> $GITHUB_OUTPUT
            fi
          else
            echo "✅ No vulnerabilities found" >> $GITHUB_STEP_SUMMARY
            echo "scan_status=passed" >> $GITHUB_OUTPUT
          fi

      # 5. Construye la imagen Docker
      - name:  Build Docker Image
        run: |
          docker build -t my-app:latest .

      # 6. Guarda la imagen Docker como artefacto (opcional)
      - name:  Guardar imagen Docker como artefacto (opcional)
        run: |
          docker save my-app:latest -o my-app-latest.tar

      # 7. Sube la imagen Docker como artefacto (opcional)
      - name:  Subir imagen Docker como artefacto (opcional)
        uses: actions/upload-artifact@v4
        with:
          name: my-app-docker-image
          path: my-app-latest.tar
          retention-days: 7

      # 8. Resumen visual del escaneo de dependencias y dockerización
      - name:  Resumen de Seguridad y Dockerización
        run: |
          echo "##  Resumen de Seguridad y Dockerización" >> $GITHUB_STEP_SUMMARY
          echo "| Paso | Estado |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.npm_audit.outputs.scan_status }}" = "passed" ]; then
            echo "| Escaneo de dependencias | ✅ Sin vulnerabilidades críticas/altas |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Escaneo de dependencias | ❌ Vulnerabilidades críticas/altas encontradas |" >> $GITHUB_STEP_SUMMARY
          fi
          echo "| Dockerización | ✅ Imagen construida y guardada como artefacto |" >> $GITHUB_STEP_SUMMARY
